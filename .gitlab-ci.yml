stages:
  - check
  - build
  - deploy

default:
  interruptible: true
  timeout: 10 minutes
  retry: 1

variables:
  # versions of tools used in this pipeline
  SCCACHE_VERSION: 0.7.0
  TRUNK_VERSION: 0.17.5
  MDBOOK_MERMAID_VERSION: 0.12.6
  CARGO_LLVM_COV_VERSION: 0.5.36
  CARGO_HACK_VERSION: 0.6.13
  CARGO_DENY_VERSION: 0.14.3
  RUST_VERSION: "1.74"

.rust:
  image: rust:$RUST_VERSION-bookworm
  variables:
    RUSTC_WRAPPER: /usr/local/bin/sccache
    SCCACHE_IDLE_TIMEOUT: "1200"
  before_script:
    - curl -sSL "https://github.com/mozilla/sccache/releases/download/v$SCCACHE_VERSION/sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz" | tar -xzf- -C /usr/local/bin --strip-components=1
    - apt update
    - apt install -y cmake
    - sccache --start-server
  after_script:
    - sccache --stop-server

.services:
  services:
    - name: postgres:16
      variables:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
    - name: minio/minio
      alias: minio
      variables:
        MINIO_ROOT_USER: buildsrs
        MINIO_ROOT_PASSWORD: password
        MINIO_DOMAIN: minio
      command: ["server", "/data"]
    - name: docker:dind
  variables:
    DATABASE: "host=postgres user=postgres password=password"
    MINIO_ENDPOINT: http://minio:9000
    MINIO_USER: buildsrs
    MINIO_PASS: password
    DOCKER_HOST: tcp://docker:2375

.docker:
  stage: build
  image: docker
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build . -f $FOLDER/Dockerfile -t $CI_REGISTRY_IMAGE/$FOLDER:$CI_COMMIT_REF_SLUG
    - docker push "$CI_REGISTRY_IMAGE/$FOLDER:$CI_COMMIT_REF_SLUG"

tests:
  extends: [".rust", ".services"]
  stage: check
  script:
    - cargo test --all-features

coverage:
  extends: [".rust", ".services"]
  stage: check
  script:
    - curl -sSL "https://github.com/taiki-e/cargo-llvm-cov/releases/download/v${CARGO_LLVM_COV_VERSION}/cargo-llvm-cov-aarch64-unknown-linux-musl.tar.gz" | tar zxv -C /usr/local/bin
    - rustup component add llvm-tools
    - cargo llvm-cov --all-features --html --fail-under-lines 30 --ignore-run-fail
  artifacts:
    paths:
      - target/llvm-cov/html

features:
  extends: [".rust"]
  stage: check
  script:
    - curl -sSL "https://github.com/taiki-e/cargo-hack/releases/download/v0.6.13/cargo-hack-x86_64-unknown-linux-musl.tar.gz" | tar zxv -C /usr/local/bin
    - cargo hack --each-feature check

style:
  extends: [".rust"]
  stage: check
  script:
    - rustup toolchain add nightly
    - rustup component add rustfmt --toolchain nightly
    - rustup component add clippy
    - cargo +nightly fmt --version
    - cargo +nightly fmt --check --all
    - cargo clippy --workspace --all-features -- -D warnings

dependencies:
  extends: [".rust"]
  stage: check
  script:
    - curl -sSL "https://github.com/EmbarkStudios/cargo-deny/releases/download/$CARGO_DENY_VERSION/cargo-deny-$CARGO_DENY_VERSION-x86_64-unknown-linux-musl.tar.gz" | tar zxv -C /usr/local/bin --strip-components=1
    - cargo deny check

rustdoc:
  extends: [".rust"]
  stage: build
  script:
    - cargo doc --no-deps --all-features
  artifacts:
    paths:
      - target/doc

backend:
  extends: [".docker"]
  variables:
    FOLDER: backend
  only:
    - main
    - prod

migrate:
  extends: [".docker"]
  variables:
    FOLDER: database
  only:
    - main
    - prod

builder:
  extends: [".docker"]
  variables:
    FOLDER: builder
  only:
    - main
    - prod

registry-sync:
  extends: [".docker"]
  variables:
    FOLDER: registry-sync
  only:
    - main
    - prod

frontend:
  stage: build
  extends: [".rust"]
  script:
    - rustup target add wasm32-unknown-unknown
    - wget -qO- https://github.com/thedodd/trunk/releases/download/v${TRUNK_VERSION}/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf- -C /usr/local/bin
    - cd frontend && trunk build --release
  artifacts:
    paths:
      - frontend/dist
  only:
    - main
    - prod

book:
  stage: build
  image: alpine
  before_script:
    - apk add mdbook
    - wget https://github.com/badboy/mdbook-mermaid/releases/download/v$MDBOOK_MERMAID_VERSION/mdbook-mermaid-v$MDBOOK_MERMAID_VERSION-x86_64-unknown-linux-musl.tar.gz -O - | tar xz -C /usr/local/bin
  script:
    - mdbook build
  artifacts:
    paths:
      - target/book

deploy:
  stage: deploy
  image: docker
  variables:
    DOCKER_HOST: ssh://$DEPLOY_HOST
  before_script:
    - mkdir ~/.ssh
    - mv $DEPLOY_KEY ~/.ssh/id_ed25519
    - mv $DEPLOY_HOST_KEY ~/.ssh/known_hosts
    - chmod 0600 ~/.ssh/id_ed25519
  script:
    - docker stack config -c stack.yml | docker stack deploy "buildsrs-$CI_COMMIT_REF_SLUG" --compose-file - --with-registry-auth
  only:
    - main
    - prod

pages:
  stage: deploy
  image: alpine
  dependencies:
    - book
    - rustdoc
    - coverage
  script:
    - mv target/book public
    - mv target/doc public/rustdoc
    - mv target/llvm-cov/html public/coverage
  artifacts:
    paths:
      - public
  only:
    - main
