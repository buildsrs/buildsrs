stages:
  - check
  - build
  - deploy

default:
  interruptible: true
  timeout: 10 minutes
  retry: 1

variables:
  # versions of tools used in this pipeline
  SCCACHE_VERSION: 0.6.0
  TRUNK_VERSION: 0.17.5
  MDBOOK_MERMAID_VERSION: 0.12.6

.rust:
  image: rust:1.73-bookworm
  variables:
    RUSTC_WRAPPER: /usr/local/bin/sccache
    SCCACHE_IDLE_TIMEOUT: "0"
  before_script:
    - curl -sSL "https://github.com/mozilla/sccache/releases/download/v$SCCACHE_VERSION/sccache-v$SCCACHE_VERSION-x86_64-unknown-linux-musl.tar.gz" | tar -xzf- -C /usr/local/bin --strip-components=1
    - apt update
    - apt install -y cmake
  after_script:
    - sccache --stop-server

test:
  extends: [".rust"]
  stage: check
  services:
    - name: postgres:16
      variables:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
    - name: minio/minio
      variables:
        MINIO_ROOT_USER: buildsrs
        MINIO_ROOT_PASSWORD: password
        MINIO_DOMAIN: minio
      command: ["server", "/data"]
  variables:
    DATABASE: "host=postgres user=postgres password=password"
  script:
    - cargo test --all-features

clippy:
  extends: [".rust"]
  stage: check
  script:
    - rustup toolchain add nightly
    - rustup component add rustfmt --toolchain nightly
    - rustup component add clippy
    - cargo +nightly fmt --check --all
    - cargo clippy --workspace --all-features

rustdoc:
  extends: [".rust"]
  stage: build
  script:
    - cargo doc --no-deps --all-features
  artifacts:
    paths:
      - target/doc

backend:
  stage: build
  image: docker
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build . -f backend/Dockerfile -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_SLUG
    - docker push "$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_SLUG"

migrate:
  stage: build
  image: docker
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build . -f database/Dockerfile -t $CI_REGISTRY_IMAGE/migrate:$CI_COMMIT_REF_SLUG
    - docker push "$CI_REGISTRY_IMAGE/migrate:$CI_COMMIT_REF_SLUG"

builder:
  stage: build
  image: docker
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build . -f builder/Dockerfile -t $CI_REGISTRY_IMAGE/builder:$CI_COMMIT_REF_SLUG
    - docker push "$CI_REGISTRY_IMAGE/builder:$CI_COMMIT_REF_SLUG"

registry-sync:
  stage: build
  image: docker
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build . -f backend/Dockerfile -t $CI_REGISTRY_IMAGE/registry-sync:$CI_COMMIT_REF_SLUG
    - docker push "$CI_REGISTRY_IMAGE/registry-sync:$CI_COMMIT_REF_SLUG"

frontend:
  stage: build
  extends: [".rust"]
  script:
    - rustup target add wasm32-unknown-unknown
    - wget -qO- https://github.com/thedodd/trunk/releases/download/v${TRUNK_VERSION}/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf- -C /usr/local/bin
    - cd frontend && trunk build --release
  artifacts:
    paths:
      - frontend/dist

book:
  stage: build
  image: alpine
  before_script:
    - apk add mdbook
    - wget https://github.com/badboy/mdbook-mermaid/releases/download/v$MDBOOK_MERMAID_VERSION/mdbook-mermaid-v$MDBOOK_MERMAID_VERSION-x86_64-unknown-linux-musl.tar.gz -O - | tar xz -C /usr/local/bin
  script:
    - mdbook build
  artifacts:
    paths:
      - target/book

deploy:
  stage: deploy
  image: docker
  variables:
    DOCKER_HOST: ssh://$DEPLOY_HOST
  before_script:
    - mkdir ~/.ssh
    - mv $DEPLOY_KEY ~/.ssh/id_ed25519
    - mv $DEPLOY_HOST_KEY ~/.ssh/known_hosts
    - chmod 0600 ~/.ssh/id_ed25519
  script:
    - docker stack config -c stack.yml | docker stack deploy "buildsrs-$CI_COMMIT_REF_SLUG" --compose-file - --with-registry-auth
  only:
    - main
    - prod

pages:
  stage: deploy
  image: alpine
  dependencies:
    - book
    - rustdoc
  script:
    - mv target/book public
    - mv target/doc public/rustdoc
  artifacts:
    paths:
      - public
  only:
    - main
